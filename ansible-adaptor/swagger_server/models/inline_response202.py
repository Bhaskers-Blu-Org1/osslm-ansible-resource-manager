# coding: utf-8

from __future__ import absolute_import
from swagger_server.models.inline_response202_context import InlineResponse202Context
from .base_model_ import Model
from datetime import date, datetime
from typing import List, Dict
from ..util import deserialize_model


class InlineResponse202(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, request_id: str=None, request_state: str=None, context: InlineResponse202Context=None):
        """
        InlineResponse202 - a model defined in Swagger

        :param request_id: The request_id of this InlineResponse202.
        :type request_id: str
        :param request_state: The request_state of this InlineResponse202.
        :type request_state: str
        :param context: The context of this InlineResponse202.
        :type context: InlineResponse202Context
        """
        self.swagger_types = {
            'request_id': str,
            'request_state': str,
            'context': InlineResponse202Context
        }

        self.attribute_map = {
            'request_id': 'requestId',
            'request_state': 'requestState',
            'context': 'context'
        }

        self._request_id = request_id
        self._request_state = request_state
        self._context = context

    @classmethod
    def from_dict(cls, dikt) -> 'InlineResponse202':
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The inline_response_202 of this InlineResponse202.
        :rtype: InlineResponse202
        """
        return deserialize_model(dikt, cls)

    @property
    def request_id(self) -> str:
        """
        Gets the request_id of this InlineResponse202.

        :return: The request_id of this InlineResponse202.
        :rtype: str
        """
        return self._request_id

    @request_id.setter
    def request_id(self, request_id: str):
        """
        Sets the request_id of this InlineResponse202.

        :param request_id: The request_id of this InlineResponse202.
        :type request_id: str
        """

        self._request_id = request_id

    @property
    def request_state(self) -> str:
        """
        Gets the request_state of this InlineResponse202.

        :return: The request_state of this InlineResponse202.
        :rtype: str
        """
        return self._request_state

    @request_state.setter
    def request_state(self, request_state: str):
        """
        Sets the request_state of this InlineResponse202.

        :param request_state: The request_state of this InlineResponse202.
        :type request_state: str
        """
        allowed_values = ["PENDING", "IN_PROGRESS", "COMPLETED", "CANCELLED", "FAILED"]
        if request_state not in allowed_values:
            raise ValueError(
                "Invalid value for `request_state` ({0}), must be one of {1}"
                .format(request_state, allowed_values)
            )

        self._request_state = request_state

    @property
    def context(self) -> InlineResponse202Context:
        """
        Gets the context of this InlineResponse202.

        :return: The context of this InlineResponse202.
        :rtype: InlineResponse202Context
        """
        return self._context

    @context.setter
    def context(self, context: InlineResponse202Context):
        """
        Sets the context of this InlineResponse202.

        :param context: The context of this InlineResponse202.
        :type context: InlineResponse202Context
        """

        self._context = context

